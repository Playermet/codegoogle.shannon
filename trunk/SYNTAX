
#
# BNF for Shannon:
#   repeat 0 or more times: {...}
#   optional: [...]
#   group: (...)
#   OR: |
#   literal: "..." or '...'
#   any word: reference to another syntactic element
#   glue: ## (otherwise elements are separated by whitespace or can be 
#       distinguished by the parser)
#   end of statement: <SEP> (end-of-line or ';')
#   block-begin and block-end: <BEGIN> and <END> (either curly brackets or
#   or a colon followed by a single statement).
#
#   Comments are like in C++ /* */ and //
#


# ---------- Statements

statement-list ::= { ( definition | statement ) <SEP> }

definition ::= 'def' [ type-expr ] ident { type-derivator } '=' expr


# ---------- Type expression

type-expr ::= subrange-type | enum-type | other-type

subrange-type ::= 'sub' arithm-expr '..' arithm-expr

enum-type ::= 'enum' ident { ',' ident }

other-type ::= ident { type-derivator }

type-derivator ::= '^' | '<>' | container-derivator


# ---------- Expression

atom ::= ident | number | string-literal | sub-expr

sub-expr ::= '(' expr ')'


# ---------- Basic elements

ident ::= ( letter | "_" ) ## { letter | digit | "_" }

number ::= decimal | hexadecimal

decimal ::= digit ## { digit }

hexadecimal ::= "0x" ## hexdigit ## { hexdigit }

string-literal ::= "'" ## { string-element } ## "'"

string-element ::= printable-char | string-escape

string-escape ::= "\\" | "\t" | "\r" | "\n" | "\'"
        | ( "\x" ## hexdigit ## hexdigit )

