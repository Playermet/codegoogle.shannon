// EXPRESSION
assert 1 > 0
assert system.true
assert 1 + 2 * 2 == 5
assert 10 % 3 == 1
assert 10 / 3 == 3
assert 'o' | 'ne' | ' tw' | 'o' == 'one two'
assert 'three' | ' four' == 'three four'
assert not true == false
assert not 1 == -2
assert not (1 == 1 and 2 == 1)
assert 1 == 1 and 2 == 2 and 3 == 2 + 1 and 'a' == 'a'
assert true or false
assert not (false or false)
assert (1 xor 3) == 2
assert (1 or 2) == 3

// DEFINITIONS
def type nums = (one, two, three)
def dow = Mon, Tue, Wed, Thu, Fri, Sat, Sun
def intvec = int[]
def numvec = int[nums]
def charset = void^[char]
def matrix0 = int[str]^[int]
def type charset2 = void[char]
def CharIntMap = int[char]
def charfifo = char<>
def sign = -1..1

// CONSTANTS
def n0 = two
def s0 = 'abc'
def s1 = ''
def i0 = 2 * 3 + 4
def v1 = 'a' | 'b'
def v2 = 'abc' | 'def' | 'g'
def v3 = 3 | 4
def v4 = []
def v5 = [5]
def v5a = v5
def v6 = [5, 6]
def vnull = []
def int[] v7 = []
def v8 = v7 | 10 | 11
def v9 = 12 | v4 | 13 | vnull
def sign b0 = -1
def t0 = {1}
def t1 = {1, 5, 6, 7, 10}
def t3 = {}
def identChars = {'A'..'Z', 'a'..'z', '0'..'9', '_'}
def t4 = {(5 as byte)..15, 17}
def t5 = {two..three}
def d0 = {'one' = 1, 'two' = 2}
def d1 = {'a' = 'Letter A', 'b' = 'Letter B'}

assert true ; assert s0 == 'abc'
assert i0 == 10
assert v5 == v5a
assert v1 == 'ab' and #v1 == 2
assert v2[0] == 'a' and v2[1] == 'b' and v2[3] == 'd' and v2[6] == 'g'
assert #v2 == 7
assert -#v2 == -7
assert #v4 == 0 and #vnull == 0
assert v6[0] == 5 and 6 == v6[1] and #v6 == 2
assert v8[0] == 10 and v8[1] == 11
assert v9[0] == 12 and v9[1] == 13
assert d0['one'] == 1 and d0['two'] == 2
assert d1['a'] == 'Letter A' and d1['b'] == 'Letter B'
assert ?i0 and ?v5 and ?n0 and not ?one and not ?false and not ?s1 and ?v2
assert 'a' in identChars and not '?' in identChars

var a = 2
var int b = 1
assert a == 2 and b == 1
var char ch1 = 'z'
var c = 'abcd'
var d = [1, 2, 3]
var byte[][] e = [[], [1, 2, 3], [4, 5]]
var int[][] er = [[6, 7], [8, 9, 10], []]
var byte ei[] = [0, 1] | 2 | 3 | [] | [4]
var int^ r1 = 2
var r2 = @3
var str r3^ = 'abc'
var typeof r1 r4 = 10
a = r1
assert a == 2
r1 = 12
assert r1 == 12
@r2 = @r1
r1 = 1
assert r2 == 1
assert #d == 3
del d[1]
assert #d == 2 and d[0] == 1 and d[1] == 3
// error: del d[2]
del r3[0]
assert r3 == 'bc'

assert typeof c == str and typeof d == int[] and typeof e == byte[][] and typeof er == int[][]

var void words[str] = {'as', 'is'}
var void chars1[char] = {'a'..'z'}
var dic1 = {'one' = 1, 'two' = 0, 'three' = 3}
var byte dic2[str] = {'o' = 1, 'two' = 0, 'three' = 3}
var int ints1[]^[] = [[], [10, 11, 12], @[13, 14], @[]]
var int dics1[][str] = [dic1, {}]
var int dics2[]^[str] = [dic1, {'e' = 0}, {}]
var int dic3[char] = {'a' = 10, 'b' = 20}

// Should give range check errors:
var char dic4[0..2] = {0 = 'a', 2 = 'c', 255 = 'd'}
var void set2[0..2] = {-1, 0..2, 3, 4, 10}

assert typeof dic1 == int[str] and typeof dic1['www'] == int and typeof ints1[100] == int[]

a = 10 + b
assert a == 11
assert #e[0] == 0 and e[1][1] == 2 and e[2][0] == 4
assert #ei == 5 and ei[1] == 1
assert dic1['one'] == 1 and dic1['two'] == 0

system.__program_result = 'OK'
assert __program_result == 'OK'
__program_result = null
c[1] = ':'
assert c == 'a:cd'
(c[2]) = '$'
assert c == 'a:$d'
d[0] = 4
assert d[0] == 4
// error: e[0][1] = 6
// error: 1 = 2
// error: s0 = ''
assert dic1['one'] == 1 and dic1['two'] == 0
dic1['two'] = 2
assert dic1['one'] == 1 and dic1['two'] == 2
ints1[1][2] = 111
assert ints1[1][2] == 111
dics2[0]['three'] = 33
assert dics2[0]['three'] == 33
assert 'as' in words and not 'kuku' in words
assert dic2['o'] == 1 and dic2['two'] == 0 and dic2['three'] == 3
dic2['two'] = 2
assert 'two' in dic2 and dic2['two'] == 2
del dic2['two']
assert not 'two' in dic2
assert not 'z' in dic3 and 'a' in dic3 and dic3['a'] == 10
dic3['z'] = 30
assert 'z' in dic3 and dic3['z'] == 30 and dic3['b'] == 20
del dic3['z']
del dic3['a']
assert not 'a' in dic3 and not 'z' in dic3
assert 'as' in words and 'is' in words
del words['is']
assert not 'is' in words
assert typeof words['as'] == void
assert 'a' in chars1
del chars1['a']
assert not 'a' in chars1

assert 2 in nums and 96 in char and not 256 in char
assert 1 in 0..2 and ints1[1][2] in 110..111 and 10 in 0..a and not 12 in 0..a
assert if(true, true, false) and if(a in 10..1000, 'abc', 'def') == 'abc'

var str1 = 'abc'
assert str1[0..1] == 'ab' and str1[0..2] == 'abc' and str1[2..2] == 'c'
assert str1[0..] == 'abc' and str1[1..] == 'bc' and str1[3..] == ''
var vec1 = ['abc', 'def', 'ghi']
assert #vec1[0..1] == 2 and vec1[0..1][0] == 'abc' and vec1[0..1][1] == 'def'
assert #vec1[1..] == 2 and vec1[1..][1] == 'ghi'
assert vec1[0..] == vec1

// TYPECASTS
begin assert 1 as char == '\x01'
begin
    assert 'a' as int == 97
var any v10 = 0
begin
// huh?
{
    assert v10 as nums == one
    assert 1 is int and 'abc' is str
    assert not 1 is str and not 'abc' is int
    assert v10 is int and not v10 is str
    assert v10 is any
    assert v10 as nums is nums
    begin { assert 'a' as str == 'a' and ch1 as str == 'z' }
}

// exit 'Hmmmmmm'


// LOCAL BLOCKS
var b1 = 0
begin {
    var b1 = 1
    assert b1 == 1
}
begin {
    var b1 = 2
    var b2 = 3
    def s0 = 'xyz'
    def nums = zero, one, two, three, four
    assert b1 == 2 and b2 == 3 and s0 == 'xyz' and one == 1 as nums
}
assert b1 == 0 and s0 == 'abc' and one == 0 as nums

// BRANCHING
if b1 == 0
    assert true
if b1 <> 0 assert false
if true {
    var b1 = 4
    assert b1 == 4
}
assert b1 == 0

if b1 == 0 assert true
else assert false
if b1 <> 0
    { assert false }
// Hmmmm
else

// Hm?
    { assert true }

if b1 == 0 assert true
elif b1 == 1 assert false
elif b1 == 2
{
    // Hm...
    
    assert false
}
else
    assert false

if b1 == 1 assert false
elif b1 == 0 ; assert true
elif b1 == 2 ; assert false

else
    ; ;
    assert false

if b1 == 1 assert false
elif b1 == 2 assert false
elif b1 == 0 assert true
else assert false

if b1 == 1 assert false
elif b1 == 2 assert false
elif b1 == 3 assert false
else assert true

if b1 == 1 assert false
elif b1 == 0 assert true
elif b1 == 3 assert false

case b1
{
    1:      assert false
    0:      assert true
    else    assert false
}

case b1
{
    1:      assert false
    0, 2:   assert true
    else    assert false
}

case b1
{
    0..2, 5: assert true
    1:       assert false
}

case b1
{
    1: assert false
    2:
        { assert false }
    else assert true
}

case s0
{
    'abc': assert true
    'xyz': assert false
}

case typeof s0
{
    str: assert true
    int: assert false
    else
    {
        assert false
    }
}


// LOOPS

var wi = 0
while wi < 3
{
    wi = wi + 1
    continue
    assert false
}
assert wi == 3

while wi < 3
    assert false

while wi < 6
{
    var wl1 = 'asd'
    begin
    {
        var wl2 = wi
        wi = wi + 1
        continue
    }
    assert false
}

assert wi == 6

while wi < 100
{
    var wl1 = 'zxc'
    if wi == 8
    {
        var wl2 = 'qwe'
        break
        assert false
    }
    wi = wi + 1
}

assert wi == 8
