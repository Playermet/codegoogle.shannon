// EXPRESSION
assert 1 > 0
assert system.true
assert 1 + 2 * 2 == 5
assert 'o' | 'ne' | ' tw' | 'o' == 'one two'
assert 'three' | ' four' == 'three four'
assert not true == false
assert not 1 == -2
assert not (1 == 1 and 2 == 1)
assert 1 == 1 and 2 == 2 and 3 == 2 + 1 and 'a' == 'a'
assert true or false
assert not (false or false)
assert (1 xor 3) == 2
assert (1 or 2) == 3

// DEFINITIONS
def byte = 0..255
def type nums = (one, two, three)
def dow = Mon, Tue, Wed, Thu, Fri, Sat, Sun
def intvec = int[]
def numvec = int[nums]
def charset = char^[..]
def matrix0 = int[str]^[int]
def type charset2 = void[char]
def CharIntMap = int[char]
def charfifo = char<>
def sign = -1..1

// CONSTANTS
def n0 = two
def s0 = 'abc'
def s1 = ''
def i0 = 2 * 3 + 4
def v1 = 'a' | 'b'
def v2 = 'abc' | 'def' | 'g'
def v3 = 3 | 4
def v4 = []
def v5 = [5]
def v5a = v5
def v6 = [5, 6]
def vnull = []
def int[] v7 = []
def v8 = v7 | 10 | 11
def v9 = vnull | [] | 12 | v4 | 13 | []
def sign b0 = -1
def t0 = {1}
def t1 = {1, 5, 6, 7, 10}
def t3 = {}
def identChars = {'A'..'Z', 'a'..'z', '0'..'9', '_'}
// def t4 = {5..15, 17}
def t5 = {two..three}
def d0 = {'one' = 1, 'two' = 2}
def d1 = {'a' = 'Letter A', 'b' = 'Letter B'}

assert true ; assert s0 == 'abc'
assert i0 == 10
assert v5 == v5a
assert v1 == 'ab' and #v1 == 2
assert v2[0] == 'a' and v2[1] == 'b' and v2[3] == 'd' and v2[6] == 'g'
assert #v2 == 7
assert #v4 == 0 and #[] == 0
assert v6[0] == 5 and 6 == v6[1] and #v6 == 2
assert v8[0] == 10 and v8[1] == 11
assert v9[0] == 12 and v9[1] == 13
assert d0['one'] == 1 and d0['two'] == 2
assert d1['a'] == 'Letter A' and d1['b'] == 'Letter B'
assert i0? and v5? and n0? and not one? and not false? and not s1? and v2?

var a = 2
var int b = 1
assert a == 2 and b == 1
var c = 'abcd'
var d = [1, 2, 3]
var int[][] e = [[1, 2, 3], [4, 5]]
var int[][] er = [[6, 7], [8, 9, 10]]
var int^ r1 = 2
var str r2^ = 'abc'
var dic1 = {'one' = 1, 'two' = 0, 'three' = 3}
var int dics1[][str] = [dic1, {}]
var int ints1[]^[] = [@[10, 11, 12], @[13, 14]]
var int dics2[]^[str] = [@dic1, @{}]

a = 10 + b
assert a == 11
assert e[0][1] == 2 and e[1][0] == 4
a = r1
assert a == 2
r1^ = 12
assert r1 == 12
assert dic1['one'] == 1 and dic1['two'] == 0
system.__program_result = 'OK'
assert __program_result == 'OK'
c[1] = ':'
assert c == 'a:cd'
(c[2]) = '$'
assert c == 'a:$d'
d[0] = 4
assert d[0] == 4
// error: e[0][1] = 6
// error: 1 = 2
// error: s0 = ''
assert dic1['one'] == 1 and dic1['two'] == 0
dic1['two'] = 2
assert dic1['one'] == 1 and dic1['two'] == 2
ints1[0][1] = 111
assert ints1[0][1] == 111
dics2[0]['three'] = 33
dump dics2

// TYPECASTS
assert 1 as char == '\x1'
assert 'a' as int == 97
var any v10 = 0
assert v10 as nums == one
assert 1 is int and 'abc' is str
assert 1 is not str and 'abc' is not int
assert v10 is int and v10 is not str
assert v10 is any
assert v10 as nums is nums

system.__program_result = null
