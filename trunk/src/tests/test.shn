# EXPRESSION
assert 1 > 0
assert system.true
assert 1 + 2 * 2 == 5
assert 'o' | 'ne' | ' tw' | 'o' == 'one two'
assert 'three' | ' four' == 'three four'
assert not true == false
assert not 1 == -2
assert not (1 == 1 and 2 == 1)
assert 1 == 1 and 2 == 2
assert true or false
assert not (false or false)
assert (1 xor 3) == 2
assert (1 or 2) == 3

# DEFINITIONS, NULL COMPOUND
def s0 = 'abc'
def sign = -1..1
def charset = char*[..]
def byte = 0..255
def -1..1 r3 = 0
def a = 0
def int b = 1
def int intarray[] = []
def int*[] intarray2 = []
# def nullcont = []
def r1 = 0..9
var v1 = 1
# var v2 = []
var int v3[] = []
var char f1<> = []
def any var1 = 'I\'m a variant'

# CONTAINERS
def sign s1[..] = [-1..0]
def sign ss1[..] = [-1, 1]
def sign ss2[..] = [0, 1]
def sign ss3[..] = [1]
def sign ss4[..] = [0]
def sign ss5[..] = [-1..1]
assert -1 in s1
assert not 1 in s1
def r2 = [10..20]
assert 11 in r2
assert not 9 in r2
def d1 = ['k1' = 1, 'k' = 2]
assert 'k1' in d1
assert 'k' in d1
assert not 'j' in d1
assert 'b' in 'a'..'z'
def int v4[] = [1, 2, 3]
var v5 = ['abc', 'd', 'ef']
var 'a'..'z' r4 = 'a'
assert 'b' in r4..'z'
assert 1 in byte
assert 'a' in char
def charset some_letters = ['a', 'b', 'c']
assert 'b' in some_letters
def charset letters = ['_', 'A'..'Z', 'a'..'z']
assert 'b' in letters
assert not '0' in letters
def int s2[..] = [1, 2, 3]
assert 1 in s2
assert not 4 in s2
var str a1[sign] = []
var str a2[sign] = [-1 = 'negative', 1 = 'positive']
assert a2[-1] == 'negative' and a2[1] == 'positive'

# TYPECASTS
assert int('A') == 65
assert char(65) == 'A'
assert str(65) == '65'
assert bool('abc')
assert not bool('')
var any v2 = 32
assert char(v2) == ' '
assert v2 == 32
var s3 = 'abc'
assert str('a') <> s3 and s3 <> 'a'

# ENUMS
assert (v2 == 32)
def sign1 = (negative, zero, positive)
assert int(negative) == 0 and int(zero) == 1 and int(positive) == 2
var int sign1a[sign1] = [negative = -1, zero = 0, positive = 1]
assert sign1a[negative] == -1

var char t1[..][] = [[], ['a'..'z']]
assert not 'a' in t1[0]
assert 'a' in t1[1]
dump t1

