
* Assignment operator

* Operators 'is' and 'as'

* Nested block, if, while, case

* Ordinal set operations: inversion (not), union (or), intersection (and),
  subtraction (-)

* Include for sets? set s['item'] (set is a keyword anyway - get/set property)
  But it's a "soft" keyword that can be used as an identifier. So something
  else maybe.

* Operator delete, e.g.: delete d['key'] (applies to sets too)

* Iterators for all container types. Iterators should lock the container to
  prevent modification.

* A `pair` data type, which is a dictionary iteration element. But maybe not
  only. Can be a built-in state with two fields.

* for loop: allow types, also range as an exception can have variable
  boundaries

* Functions

* Run-time range checking (as well as compile-time)

* Nullable types? Look at C#. Easy to implement, just need strictly defined
  semantics, also a default assignment operator, again, like in C#.

* Strings are immutable, and they are not references like containers. But any
  char vector is a string and thus it's not a reference. What to do? So this is
  a big TODO: implement a shared string class which is not copy-on-write.

* Implement our own vector class with realloc()

* Range types and ordinal sets should be mutually convertible

* Can vectors be converted or wrapped in fifos? Implicitly or explicitly?

* Multiple return values: allow to assign them to a vector?

* Optimize function calls: if "self" is not used, define all local vars as
  just locals, not "this" vars. Actually this means if a function doesn't
  return "self", it can't use the self reference in any way. This is probably
  okay.

* HTML embedded mode

* Compiler directives: #$DEBUG ON|OFF  #$RANGE_CHECK ON|OFF  #$ASSERT ON|OFF
  #$ECHO ON|OFF  #$EMBED ON|OFF  #$CURLY ON|OFF

* := assignment as a function?

* Abstract module and module inheritance paradigm. Modules can be loaded at run
  time, but they should be inherited from some known module type. Database
  drivers can be written this way.

* Alternate syntax for string keys in dictionaries: dict->key. This will work
  for dynamic states too (?). Actually dict.key might work too.

* Forward declarations

* Have the code generator evaluate some operations at generation time if
  possible. Need to store codeseg offset with each genstack element.

* Built-ins: empty(), count(), typeof(), if() etc.

* Assignment operators (+=, etc) aren't very nice with the boolean/bitwise
  and, or, etc.

