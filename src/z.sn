module Z


assert sizeof(0..2) == 1 and sizeof(-1..1) == 4 and sizeof(large) == 8
assert typeof(0) == int and typeof('a') == char and typeof('abc') == str

# const int int = 1

def int aa1[0..9]
def 0..9 aa2

def bool oy[char[]]
def int myInt
def bool mySet[myInt]
def System.void blah
def int [][] blaahhh
def int blooh [char][bool]
def void set[0..9]
def 0..9 digit
def bool yopt[str]
def int intr[..]
def typeref mytr

const int g = 922337
assert g == 922337
const glarge = 9223372036854775807L
assert glarge == 9223372036854775807L
const h = 'h'
assert h == 'h'
const i = '\x00'
const j = h
assert j == 'h'
const dc = 'a'..j
assert dc == ('a'..'h')
const dd = 0..2
const ref = int[char]
assert ref == int[char]
const 0..2 new1 = 1
const str s = 'a'
const s1 = 'b'
const s2 = 'abc'
assert 1 != 2
const a4 = 1L < 9223372036854775806L
const a5 = glarge > 9223372036854775806L
const a6 = 0..9
assert not 'ab' == 'abc'
assert 'ab' < 'abc'
assert s1 == 'b'
assert 'b' == s1
echo 'typeof(a6) =', typeof(a6)

assert not 'abc' == 'a'
assert 'b' != 'def'
const typeof(h) h1 = 'a'
const typeof(h1) h2 = 'b'
const h3 = typeof(h2)
const typeref h4 = int

const t1 = int('A')
const t2 = int(1000000000000000000L)
const t3 = large(1)
const t4 = 1000000000000000000L

const b4 = false
const b5 = int(true)
const b6 = bool(1)
const b7 = false..true
const false..true b8 = bool('\x00')

def enum e1(C1, C2, C3)
const e2 = C2
const C2..C3 e3 = e1(1)
const C1..C2 e4 = e3

const enum e5(C5, C6, C7) = C6

const hex1 = 0x7A00000000000000L
# const v = null

const b1 = 0L < 2L
const b2 = bool(1)

const o1 = 1 + 2 * 3
const o2 = 1L + 3L
const o3 = 1 or 4 - (o1 + int(o2))
const o4 = -9 / 2
const o5 = 0x10 shr 1

const f1 = true or true and false
const f2 = true xor 0 < 1 xor true
assert ((1 or 2 or 4) shl 1) == 14
assert not (not true and false)
const f5 = not 1 and 3
assert typeof(f5) == int and f5 == 2
assert (not 0L and 0x7f00000000000000L) == 0x7f00000000000000L

def enum days(Mon, Tue, Wed)
var int aa[] = 1
var aa3 = aa | 2 | 3
var days aa4[] = Mon | Tue | Wed

const u2 = 'abc' | 'def'
const u3 = '@' | 'abc' | 'def' | 'g'
const u4 = 'x' | 'y' | 'z!'
const u5 = ''

const int u6[] = []
assert u6 == []
const u8 = 1 | 2 | 3 + 5
assert u8 == [1, 2, 3 + 5]

# const j1 = null | null
# const void j2[] = null
def int intv[]
const int u10[] = [1, 2, 3] | intv([4, 5, 6])
def 0..3 nums
const nums num = 1
const u11 = intv([])
const u12 = u11
const nums nv[] = [1, 2, 3]
# const nums nv[] = [1, 2, 4]

const ss0_2 = sizeof(0..2)
const ss_1_1 = sizeof(-1..1)
const ssnums = sizeof(nums)
const ssint = sizeof(int)
const sslarge = sizeof(large)
const sschar = sizeof(char)
const ssptr = sizeof(str)

var va = 0
var int vd[..] = 0..1
var vf = 'a'
var false..true dbool = false


var vs = 'ab' | u3
# const tt = typeof(vs)

echo
echo 'Yay!'
echo

echo 'vs = ', vs
echo vs | '+more'
echo

var v1 = 'g'
var v2 = 'hi'
var v3 = 12345
var v4 = 1000000000000L
var v5 = int[]
echo v5


assert v1 == 'g' and v2 == 'hi' and v3 == 12345 and v4 == 1000000000000L and v5 == int[]

var v6 = 'g' | 'h'
var v7 = 1 | 2 | 3
var v8 = 1L | 2L | 3L
assert v6 == 'gh' and v6 == ['g', 'h'] and v7 == [1, 2, 3] and v8 == [1L, 2L, 3L]
assert 'a' | 'bc' | 'd' | ['e', 'f'] | v1 | v2 == 'abcdefghi'

v1 = 'h'
v6 = 'klm'
v7 = 2
begin:
    assert v1 == 'h' and v6 == 'klm' and v7 == [2]

var w1 = 0
begin:
    var w1 = 1
    assert w1 == 1
    def int g[]
    var g h = []
    echo 'Hello, nested block!', str(w1), v1
    begin:
        const w1 = 2L
        assert w1 == 2L
        echo 'Hello, nested nested block!', typeof(w1), str(w1)
        var a = 'a' | 'b'
begin:
    var w1 = 3

assert w1 == 0

var int v9 = if(true, 1, 2)
assert v9 == 1
v9 = if(v9 == 1, 3, 4)
assert v9 == 3


assert if(true, 'cd' | 'e', 'fg' | 'h') == 'cde'
var bool bb = 'a' | 'b' == 'ab' or 'c' | 'd' == 'cd'

echo int | char | bool


begin:
    const a = [[1, 2], [3, 4]]
    var int b[] = []
    var c = [1] | b
    assert c == [1]
    var d = ['abc', 'def']
    var e = d | 'ghi'
    # assert e == ['abc', 'def', 'ghi']
    var f = ['89@'] | e
    var g = f | d
    echo g

begin:
    ;

echo

var ift = 0

if true: ;
else: ;

if true: ift = 1
assert ift == 1

if false: assert false

if true: ift = 2
else: assert false
assert ift == 2

if false: assert false
else: ift = 5
assert ift == 5

if true: ift = 6
elif false: assert false
assert ift == 6

if false: assert false
elif true: ift = 7
assert ift == 7

if false: assert false
elif true: ift = 8
elif false: assert false
assert ift == 8

if false: assert false
elif false: assert false
elif true: ift = 9
assert ift == 9

if false: assert false
elif false: assert false
elif true: ift = 10
else: assert false
assert ift == 10

if false: assert false
elif false: assert false
else: ift = 11
assert ift == 11

var wt = 0
while wt < 100:
    wt = wt + 1
assert wt == 100

wt = 0
while wt < 100:
    var s = 'memleak' | 'test'
    wt = wt + 1
    if wt == 50:
        var s = 'memleak' | 'test'
        break
assert wt == 50

var ws = ''
while ws < 'aaaaa':
    ws = ws | 'a'
    echo ws
    continue
    assert false

var ct = 'a'
case ct:
    'a': ct = 'b'
    'c': assert false
assert ct == 'b'

case ct:
    'a', 'c': assert false
    'd', 'b': ct = 'c'
    else: assert false
assert ct == 'c'

case ct:
    'a': assert false
    'b': assert false
    else: ct = 'd'
assert ct == 'd'

case ct:
    'a': assert false
    'b', 'c'..'e', 'g': assert true
    else: assert false

var ct2 = 'abc'
case ct2:
    'a': assert false
    'abc': ct2 = 'def';
    'x', 'xyz', 'abc': assert false
assert ct2 == 'def'

# -------------------------------------------------------------------------

def int avg(int a, int b):
    ct2 = 'a'

